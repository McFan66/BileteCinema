/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import dvdrental.Bilet;
import java.awt.Desktop;
import java.awt.event.ActionEvent;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.net.URISyntaxException;
import java.nio.file.FileSystems;
import java.nio.file.Path;
import java.sql.Connection;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;
import models.BiletB;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.design.JasperDesign;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.engine.xml.JRXmlLoader;
import net.sf.jasperreports.view.JasperViewer;
import org.hibernate.Session;
import org.hibernate.internal.SessionImpl;
import services.BiletServiceImpl;
import threads.FanaRunnable;
import utils.HibernateUtil;
import utils.HtmlUtils;

/**
 *
 * @author Stefan
 */
public class FrmRaport extends javax.swing.JDialog {

    private BiletServiceImpl biletService = BiletServiceImpl.getInstance();
    private FanaRunnable fanaRunnable;
    private FrmLoadingRaport frmLoadingRaport = new FrmLoadingRaport(this, true);

    public FrmRaport(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        Calendar c = Calendar.getInstance();
        //dateChooserDataSfarsit.setMaxSelectableDate(c.getTime());
        // dateChooserDataInceput.setMaxSelectableDate(c.getTime());
        dateChooserDataSfarsit.setDate(c.getTime());
        c.add(Calendar.DAY_OF_MONTH, -30);
        dateChooserDataInceput.setDate(c.getTime());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cmbTip = new javax.swing.JComboBox<>();
        lblTipRaport = new javax.swing.JLabel();
        lblDataInceput = new javax.swing.JLabel();
        lblDataSfarsit = new javax.swing.JLabel();
        dateChooserDataInceput = new com.toedter.calendar.JDateChooser();
        dateChooserDataSfarsit = new com.toedter.calendar.JDateChooser();
        btnGenereaza = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        cmbTip.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Raport spectacole in perioada", "Raport vanzari casieri in perioada", "Raport incasari in perioada" }));

        lblTipRaport.setText("Tipul raportului:");

        lblDataInceput.setText("Data inceput:");

        lblDataSfarsit.setText("Data sfarsit:");

        dateChooserDataInceput.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                dateChooserDataInceputPropertyChange(evt);
            }
        });

        btnGenereaza.setText("Genereaza raport");
        btnGenereaza.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenereazaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblTipRaport)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbTip, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblDataInceput)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dateChooserDataInceput, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblDataSfarsit)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnGenereaza, javax.swing.GroupLayout.DEFAULT_SIZE, 135, Short.MAX_VALUE)
                            .addComponent(dateChooserDataSfarsit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTipRaport, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbTip, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblDataSfarsit, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDataInceput, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dateChooserDataInceput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dateChooserDataSfarsit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnGenereaza)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnGenereazaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenereazaActionPerformed
//        final Date dataInceput = dateChooserDataInceput.getDate();
//        final Date dataSfarsit = dateChooserDataSfarsit.getDate();
//        StringBuilder sb = new StringBuilder();
//        try {
//            Scanner s = new Scanner(new File("src/resources/template1.html"));
//            while (s.hasNextLine()) {
//                sb.append(s.nextLine()).append("\n");
//            }
//            s.close();
//            if (dataInceput == null || dataSfarsit == null) {
//                JOptionPane.showMessageDialog(this, "Trebuie sa selectati datele pentru raport!");
//            } else {
//
////                frmLoadingRaport = new FrmLoadingRaport(FrmRaport.this, true);
////                frmLoadingRaport.setLocationRelativeTo(this);
////                frmLoadingRaport.setDefaultCloseOperation(JDialog.DO_NOTHING_ON_CLOSE);
//                //frmLoadingRaport.setModal(false);
//                //doWork(dataInceput, dataSfarsit, sb);//
//                doWork(dataInceput, dataSfarsit, sb);
//            }
//        } catch (FileNotFoundException ex) {
//            Logger.getLogger(FrmRaport.class.getName()).log(Level.SEVERE, null, ex);
//
//        }

     //   try {
            frmLoadingRaport = new FrmLoadingRaport(FrmRaport.this, true);
            frmLoadingRaport.setLocationRelativeTo(this);
            frmLoadingRaport.setDefaultCloseOperation(JDialog.DO_NOTHING_ON_CLOSE);
            doWorkBun();
            
//            Session session = HibernateUtil.getSessionFactory().openSession();
//            if (!session.isOpen()) {
//                session = HibernateUtil.getSessionFactory().getCurrentSession();
//            }
//            SessionImpl sessionConn = (SessionImpl) session;
//            Connection connection = sessionConn.connection();
//            Map<String, Object> parameters = new HashMap<String, Object>();
//            parameters.put("dataInceput", new java.sql.Date(dateChooserDataInceput.getDate().getTime()));
//            parameters.put("dataSfarsit", new java.sql.Date(dateChooserDataSfarsit.getDate().getTime()));
//            File reportFolder = new File(getClass().getResource("/rapoarte").toURI());
//            File imageFolder=new File(getClass().getResource("/resources").toURI());
//            Path path = FileSystems.getDefault().getPath("").toAbsolutePath();
//
//
//          //  System.out.println(reportFolder.getCanonicalPath());
//            parameters.put("SUBREPORT_DIR", reportFolder.getCanonicalPath() + File.separator);
//            parameters.put("logo_sus", imageFolder.getCanonicalPath() + File.separator+"logocinema.png");
//            parameters.put("IMAGES_DIR", path.toString());
//            
//
//            // String path =getClass().getResourceAsStream("/jrxml/employeesList.jrxml");
//            //InputStream input = new FileInputStream(getClass().getResourceAsStream("/jrxml/employeesList.jrxml"));
//            //InputStream myFile = new FileInputStream("C:\\Users\\Stefan\\JaspersoftWorkspace\\MyReports\\RaportBun1.jrxml");
//            InputStream myFile = getClass().getResourceAsStream("/rapoarte/RaportBun1.jrxml");
//            JasperDesign jasperDesign = JRXmlLoader.load(myFile);
//            // First, compile jrxml file.
//            JasperReport jasperReport = JasperCompileManager.compileReport(jasperDesign);
//            JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, parameters, connection);//.fillReport(jasperReport, parameters,new JRBeanCollectionDataSource(ie.test.BeanFactory.getCalcs()));
//            JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);
//            JDialog raport = new JDialog(this);
//            raport.setContentPane(jasperViewer.getContentPane());
//            raport.setSize(jasperViewer.getSize());
//            raport.setVisible(true);
//
//        } catch (JRException ex) {
//            Logger.getLogger(FrmRaport.class.getName()).log(Level.SEVERE, null, ex);
//        } catch (IOException ex) {
//            Logger.getLogger(FrmRaport.class.getName()).log(Level.SEVERE, null, ex);
//        } catch (URISyntaxException ex) {
//            Logger.getLogger(FrmRaport.class.getName()).log(Level.SEVERE, null, ex);
//        }
    }//GEN-LAST:event_btnGenereazaActionPerformed

    private void doWorkBun() {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                SwingWorker<String, Void> worker = new SwingWorker<String, Void>() {
                    @Override
                    protected String doInBackground() throws URISyntaxException, IOException, JRException {
                        //Thread.sleep(5000);
                        genereazaRaport();
                        frmLoadingRaport.dispose();
                        return null;
                    }

                    @Override
                    protected void done() {
                        frmLoadingRaport.dispose();
                    }
                };
                worker.execute();
                frmLoadingRaport.setLocationRelativeTo(FrmRaport.this);
                frmLoadingRaport.setVisible(true);
                System.out.println(frmLoadingRaport.getWidth()+ " " + frmLoadingRaport.getHeight() + " salut");
                try {
                    worker.get();
                } catch (Exception e1) {
                    e1.printStackTrace();
                }
            }
        });

    }
    
    private void doWork(Date dataInceput, Date dataSfarsit, StringBuilder sb) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                SwingWorker<String, Void> worker = new SwingWorker<String, Void>() {
                    @Override
                    protected String doInBackground() throws InterruptedException, IOException {
                        //Thread.sleep(5000);
                        generateReport(dataInceput, dataSfarsit, sb);
                        frmLoadingRaport.dispose();
                        return null;
                    }

                    @Override
                    protected void done() {
                        frmLoadingRaport.dispose();
                    }
                };
                worker.execute();
                frmLoadingRaport.setLocationRelativeTo(FrmRaport.this);
                frmLoadingRaport.setVisible(true);
                try {
                    worker.get();
                } catch (Exception e1) {
                    e1.printStackTrace();
                }
            }
        });

    }

//    private void doWork2(ActionEvent evt) {
//        DialogWait wait = new DialogWait();
//
//        SwingWorker<Void, Void> mySwingWorker = new SwingWorker<Void, Void>() {
//
//            @Override
//            protected Void doInBackground() throws Exception {
//                System.out.println("Do in background");
//                Thread.sleep(5000);
//                //Here you put your long-running process...
//                wait.close();
//                return null;
//            }
//        };
//
//        mySwingWorker.execute();
//        wait.makeWait("Test", evt);
//    }
    
    private void genereazaRaport() throws URISyntaxException, IOException, JRException{
        Session session = HibernateUtil.getSessionFactory().openSession();
            if (!session.isOpen()) {
                session = HibernateUtil.getSessionFactory().getCurrentSession();
            }
            SessionImpl sessionConn = (SessionImpl) session;
            File tt = new File(".");
            System.out.println(tt.getAbsolutePath());
            Connection connection = sessionConn.connection();
            Map<String, Object> parameters = new HashMap<String, Object>();
            parameters.put("dataInceput", new java.sql.Date(dateChooserDataInceput.getDate().getTime()));
            parameters.put("dataSfarsit", new java.sql.Date(dateChooserDataSfarsit.getDate().getTime()));
            File reportFolder = new File(getClass().getResource("/rapoarte").toURI());
            File imageFolder=new File(getClass().getResource("/resources").toURI());
            System.out.println(imageFolder);
            Path path = FileSystems.getDefault().getPath("").toAbsolutePath();



            parameters.put("SUBREPORT_DIR", reportFolder.getCanonicalPath() + File.separator);
            parameters.put("logo_sus", imageFolder.getCanonicalPath() + File.separator+"logocinema.png");
            parameters.put("IMAGES_DIR", path.toString());
            
            InputStream myFile = new InputStream() {
            @Override
            public int read() throws IOException {
                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }
        };
            
            if (cmbTip.getSelectedIndex()==0) {
                myFile = getClass().getResourceAsStream("/rapoarte/RaportBun1.jrxml");
            }else if (cmbTip.getSelectedIndex()==1){
                myFile = getClass().getResourceAsStream("/rapoarte/RaportVanzariCasieri.jrxml");
            }else 
                myFile = getClass().getResourceAsStream("/rapoarte/RaportIncasari.jrxml");
            JasperDesign jasperDesign = JRXmlLoader.load(myFile);
            // First, compile jrxml file.
            JasperReport jasperReport = JasperCompileManager.compileReport(jasperDesign);
            JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, parameters, connection);//.fillReport(jasperReport, parameters,new JRBeanCollectionDataSource(ie.test.BeanFactory.getCalcs()));
            JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);
            JDialog raport = new JDialog(this);
            raport.setContentPane(jasperViewer.getContentPane());
            raport.setSize(jasperViewer.getSize());
            raport.setVisible(true);
    }
    
    
    private void generateReport(Date dataInceput, Date dataSfarsit, StringBuilder sb) throws IOException {

        List<Bilet> listaBilete = biletService.getBileteByData(dataInceput, dataSfarsit);
        String test = sb.toString().replace("{titlu_raport}", cmbTip.getSelectedItem().toString());
        DateFormat formatter = new SimpleDateFormat("dd.MM.yyyy");
        test = test.replace("{data_inceput}", formatter.format(dataInceput));
        test = test.replace("{data_sfarsit}", formatter.format(dataSfarsit));
        // sb.toString().replace("{titlu_raport}", cmbTip.getSelectedItem().toString());
        List<String> listaRanduri = new ArrayList<String>();
        listaRanduri.add(HtmlUtils.createColumn("Numar bilet", true) + HtmlUtils.createColumn("Nume spectacol", true) + HtmlUtils.createColumn("Data vanzarii", true) + HtmlUtils.createColumn("Pret", true));
        for (Bilet b : listaBilete) {
//            listaRanduri.add(HtmlUtils.createColumn(String.valueOf(b.getId()) + HtmlUtils.createColumn(String.valueOf(b.getSpectacol().getId())) + HtmlUtils.createColumn(formatter.format(b.getData())) + HtmlUtils.createColumn(String.valueOf(b.getSpectacol().getPret()))));
        }

        String tabel = new String();
        for (int i = 0; i < listaRanduri.size(); i++) {
            tabel = tabel + HtmlUtils.createRow(listaRanduri.get(i));
            System.out.println(listaRanduri.get(i));
        }
        tabel = HtmlUtils.createTable(tabel);
        test = test.replace("{continut}", tabel);

        File currentDir = new File(".");
        File rapoarte = new File(currentDir, "rapoarte");
        if (!rapoarte.exists()) {
            rapoarte.mkdir();
        }
        File raport = new File(rapoarte, String.format("%s - %s.html", cmbTip.getSelectedItem().toString(), System.currentTimeMillis()));
        FileWriter myWriter = new FileWriter(raport);
        myWriter.write(test);
        myWriter.flush();
        myWriter.close();
        Desktop.getDesktop().open(raport);

    }

    private void dateChooserDataInceputPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_dateChooserDataInceputPropertyChange
        if (dateChooserDataInceput.getDate() != null) {
            Calendar c = Calendar.getInstance();
            c.setTime(dateChooserDataInceput.getDate());
            dateChooserDataSfarsit.setMinSelectableDate(c.getTime());
        }

    }//GEN-LAST:event_dateChooserDataInceputPropertyChange

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmRaport.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmRaport.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmRaport.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmRaport.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                FrmRaport dialog = new FrmRaport(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnGenereaza;
    private javax.swing.JComboBox<String> cmbTip;
    private com.toedter.calendar.JDateChooser dateChooserDataInceput;
    private com.toedter.calendar.JDateChooser dateChooserDataSfarsit;
    private javax.swing.JLabel lblDataInceput;
    private javax.swing.JLabel lblDataSfarsit;
    private javax.swing.JLabel lblTipRaport;
    // End of variables declaration//GEN-END:variables
}
